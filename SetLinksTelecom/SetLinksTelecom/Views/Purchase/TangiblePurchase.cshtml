@model SetLinksTelecom.DTO.DtoTangiblePurchase

@{
    ViewBag.Title = "TangiblePurchase";
    if (Session["userName"] == null)
    {
        Response.Redirect("~/User/Login");
    }
}

<h4>Tangible Purchase</h4>

@using (Html.BeginForm("TangiblePurchase", "Purchase", FormMethod.Post, new { onsubmit = "return SubmitForm(this)" }))
{
    @Html.HiddenFor(m => m.PurchaseId)


    <div class="row">
        <div class="col-8">
            <div class="row">
                <div class="col">
                    <div class="form-group" id="dvDatePurchased">
                        @Html.LabelFor(m => m.DatePurchased, new { @class = "col-form-label col-form-label-sm" })
                        @Html.EditorFor(m => m.DatePurchased, new { htmlAttributes = new { @class = "form-control form-control-sm", @id = "DatePurchased" } })
                    </div>

                </div>
                <div class="col">
                    <div class="form-group" id="dvPortal">
                        @Html.LabelFor(m => m.PortalId, new { @class = "col-form-label col-form-label-sm" })
                        <br />
                        @Html.DropDownListFor(m => m.PortalId, new SelectList(Model.Portals, "PortalId", "Name"), "Select Portal", new { @class = "ddl form-control form-control-sm", @id = "PortalId" })
                        @Html.ValidationMessageFor(m => m.PortalId)
                    </div>
                </div>

                <div class="col">
                    <div class="form-group" id="dvItem">
                        @Html.LabelFor(m => m.ItemId, new { @class = "col-form-label col-form-label-sm" })
                        <br />
                        @Html.DropDownListFor(m => m.ItemId, new SelectList(Model.Items, "ItemId", "Name"), "Select Item", new { @class = "ddl form-control form-control-sm", @id = "ItemId" })
                        @Html.ValidationMessageFor(m => m.ItemId)
                    </div>
                </div>

                <div class="col">
                    <div class="form-group">
                        @Html.LabelFor(m => m.Subname, new { @class = "col-form-label col-form-label-sm" })
                        @Html.EditorFor(m => m.Subname, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                        @Html.ValidationMessageFor(m => m.Subname)
                    </div>
                </div>

            </div>

            <div class="row">

                <div class="col">
                    <div class="form-group">
                        @Html.LabelFor(m => m.Rate, new { @class = "col-form-label col-form-label-sm" })
                        @Html.EditorFor(m => m.Rate, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                    </div>
                </div>

                <div class="col">
                    <div class="form-group">
                        @Html.LabelFor(m => m.Total, new { @class = "col-form-label col-form-label-sm" })
                        @Html.TextBoxFor(m => m.Total, new { @class = "form-control form-control-sm" })
                        @Html.ValidationMessageFor(m => m.Total)
                    </div>
                </div>


                <div class="col">
                    <div class="form-group">
                        @Html.LabelFor(m => m.Remarks, new { @class = "col-form-label col-form-label-sm" })
                        @Html.TextAreaFor(m => m.Remarks, new { @class = "form-control form-control-sm", @id = "Remarks" })
                    </div>
                </div>

            </div>


            <div class="form-group">
                <button type="submit" value="Submit" class="btn btn-primary"><i class="fa fa-save"></i> Submit</button>
            </div>

        </div>
        <div class="col" style="border-style: groove; padding-top: 20px;">
            <h5> Add Number</h5>
            <div class="row">
                <div class="col">
                    <div class="form-group" id="dvPercentage">
                        @Html.Label("Number", new { @class = "col-form-label col-form-label-sm" })
                        @Html.Editor("Number", new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                    </div>
                </div>
                <div class="col">
                    <div class="form-group" style="position: absolute; bottom: 0;">
                        <button type="submit" class="btn btn-sm btn-primary" onclick="return addNumber($('#Number').val());"><i class="fa fa-plus"></i> Add</button>
                    </div>
                </div>
            </div>

            <div class="form-group">
                <div class="input-group mb-3">
                    <div class="custom-file">
                        <input type="file" class="custom-file-input" id="fileUpload">
                        <label class="custom-file-label" for="fileUpload">Choose file</label>
                    </div>
                    <div class="input-group-append">
                        <span class="input-group-text" id="upload">Upload</span>
                    </div>
                </div>
            </div>

            <div class="alert alert-dismissible alert-danger" id="columnNameError" style="display:none;">
                <button type="button" class="close" data-dismiss="alert" style="padding-top: 5px;">&times;</button>
                @*<strong>Oh snap!</strong> <a href="#" class="alert-link">Change a few things up</a> and try submitting again.*@
                Column Name Must be <strong>Number</strong>
            </div>

            <table id="tanPurTable" class="table table-hover">
                <thead>
                    <tr>
                        <th>Number</th>
                        <th>Delete</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>
    </div>

}



@section scripts
{
    <script>
        String.prototype.replaceAll = function(search, replacement) {
            var target = this;
            return target.split(search).join(replacement);
        };
    </script>

    <script id="rowNumberTable" type="text/template">
        <tr class="rowNumberClass">
            <td>{Number}</td>
            <td><a class='btn btn-danger btn-sm' style='margin-left:5px;' onClick="Delete(this);"><i class='fa fa-trash'></i> Delete</a></td>
        </tr>
    </script>
    @*<script>
            //$('#rowNumberTable').html()
        </script>*@


    <script src="//cdn.datatables.net/1.10.19/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.10.19/js/dataTables.bootstrap4.min.js"></script>

    <!-- #region File Upload -->

    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.14.1/xlsx.full.min.js"></script>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.14.1/jszip.js"></script>

    <script type="text/javascript">
        $("body").on("click",
            "#upload",
            function() {
                event.preventDefault();

                //Reference the FileUpload element.
                var fileUpload = $("#fileUpload")[0];

                //Validate whether File is valid Excel file.
                var regex = /^([a-zA-Z0-9\s_\\.\-:])+(.xls|.xlsx)$/;

                if (regex.test(fileUpload.value.toLowerCase())) {
                    if (typeof (FileReader) != "undefined") {
                        var reader = new FileReader();

                        //For browsers other than IE
                        //console.log(reader);
                        if (reader.readAsBinaryString) {
                            reader.onload = function(e) {
                                ProcessExcel(e.target.result);
                            };
                            reader.readAsBinaryString(fileUpload.files[0]);
                        } else {
                            //For IE Browser.
                            reader.onload = function(e) {
                                var data = "";
                                var bytes = new Uint8Array(e.target.result);
                                for (var i = 0; i < bytes.byteLength; i++) {
                                    data += String.fromCharCode(bytes[i]);
                                }
                                ProcessExcel(data);
                            };
                            reader.readAsArrayBuffer(fileUpload.files[0]);
                        }
                    } else {
                        alert("This browser does not support HTML5.");
                    }
                } else {
                    alert("Please upload a valid Excel file.");
                }
            });


        function ProcessExcel(data) {
            //Read the Excel File data.
            var workbook = XLSX.read(data,
                {
                    type: 'binary'
                });
            //console.log(workbook);

            //Fetch the name of First Sheet.
            var firstSheet = workbook.SheetNames[0];
            //console.log(firstSheet);

            //Read all rows from First Sheet into an JSON array.
            var excelRows = XLSX.utils.sheet_to_row_object_array(workbook.Sheets[firstSheet]);
            //console.log(excelRows);
            //console.log(excelRows.length);

            for (var i = 0; i < excelRows.length; i++) {
                if (typeof excelRows[i].Number !== 'undefined')
                    addNumber(excelRows[i].Number);
            }

            //console.log($('#tanPurTable tbody tr').length);
            if ($('#tanPurTable tbody tr').length === 0) {
                $.notify(
                    "Column Name Must be 'Number'",
                    {
                        position: "top center",
                        className: "error"
                    }
                );
                columnNameError();
            }
        }

        function columnNameError() {
            $('#columnNameError').fadeIn(1000);
            setTimeout(function() {
                $('#columnNameError').fadeOut(1000);
                },
                5000);
        }

    </script>
    <!-- #endregion -->


    <script>
        $(document).ready(function() {
            $('#Total').attr("disabled", "true");
            $('.ddl').chosen();
        });

        function addNumber(number) {
            //var number = $('#Number').val();
            var rowNumberTable = $('#rowNumberTable').html();
            $('#tanPurTable').find('tbody').append(rowNumberTable.replaceAll('{Number}', number));
            $('#Number').val('');
            valueChanged();
            $('#Number').focus();
            return false;
        }

        function Delete(my) {
            $(my).closest('tr').remove();
            valueChanged();
        }

        function valueChanged() {
            var Qty = $('#tanPurTable tbody tr').length;
            var Rate = $('#Rate').val();
            var total = Qty * Rate;
            $('#Total').val(total);

        }


        function SubmitForm(form) {
            event.preventDefault();
            $.validator.unobtrusive.parse(form);


            if ($(form).valid()) {


                var Numbers = [];

                var index = 0;
                var pur = $('.rowNumberClass');
                $.each(pur,
                    function() {
                        //console.log($(this));
                        Numbers[index] = $($(this).get(0)).find('td').get(0).innerHTML;
                        ++index;
                        //console.log(this);
                        //console.log($($(this).get(0)).find('td').get(0).innerHTML);
                        //Numbers.push({
                        //    value: $($(this).get(0)).find('td').get(0).innerHTML
                        //});
                    });

                var dtoTangiblePurchase = {
                    PurchaseId: 0,
                    PortalId: $('#PortalId').val(),
                    ItemId: $('#ItemId').val(),
                    Subname: $('#Subname').val(),
                    Rate: $('#Rate').val(),
                    DatePurchased: $('#DatePurchased').val(),
                    Remarks: $('#Remarks').val(),
                    Total: $('#Total').val(),
                    Numbers: Numbers //{ 'Numbers': Numbers }
                }
                console.log(dtoTangiblePurchase);

                $.ajax({
                    type: "POST",
                    url: form.action,
                    data: dtoTangiblePurchase,
                    success: function(data) {
                        if (data.success) {

                            //resetForm();
                            $.notify(
                                data.message,
                                {
                                    position: "top center",
                                    className: "success"
                                }
                            );

                        }
                    }
                });


            } else {
                $.notify(
                    "Validation Error",
                    {
                        position: "top center",
                        className: "error"
                    }
                );
            }

            return false;
        }
    </script>
}

